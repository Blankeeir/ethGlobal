{"version":3,"sources":["../src/DAppKitProvider/DAppKitProvider.tsx","../src/DAppKitProvider/context.ts","../src/DAppKitProvider/hooks/useConnex.ts","../src/DAppKitProvider/hooks/useWallet.ts","../src/DAppKitProvider/hooks/useWalletModal.ts","../src/WalletButton.tsx","../src/hooks/useVechainDomain/useVechainDomain.ts","../src/hooks/useVechainDomain/api/getDomain.ts","../src/hooks/useVechainDomain/constants.ts","../src/hooks/useVechainDomain/api/getAddress.ts"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport type { DAppKit, WalletSource } from '@vechain/dapp-kit';\nimport { DAppKitUI } from '@vechain/dapp-kit-ui';\nimport { subscribeKey } from 'valtio/vanilla/utils';\nimport { type Certificate } from '@vechain/sdk-core';\nimport type { DAppKitProviderOptions, DAppKitContext } from '../types';\nimport { Context } from './context';\n\nexport const DAppKitProviderData = ({\n    children,\n    connex,\n}: {\n    children: React.ReactNode;\n    connex: DAppKit;\n}): React.ReactElement => {\n    const [account, setAccount] = useState<string | null>(\n        connex.wallet.state.address,\n    );\n    const [accountDomain, setAccountDomain] = useState<string | null>(\n        connex.wallet.state.accountDomain,\n    );\n    const [isAccountDomainLoading, setIsAccountDomainLoading] = useState(\n        connex.wallet.state.isAccountDomainLoading,\n    );\n    const [source, setSource] = useState<WalletSource | null>(\n        connex.wallet.state.source,\n    );\n    const [connectionCertificate, setConnectionCertificate] =\n        useState<Certificate | null>(connex.wallet.state.connectionCertificate);\n\n    useEffect(() => {\n        const addressSub = subscribeKey(connex.wallet.state, 'address', (v) => {\n            setAccount(v);\n        });\n        const domainSub = subscribeKey(\n            connex.wallet.state,\n            'accountDomain',\n            (v) => {\n                setAccountDomain(v);\n            },\n        );\n        const isAccountDomainLoadingSub = subscribeKey(\n            connex.wallet.state,\n            'isAccountDomainLoading',\n            (v) => {\n                setIsAccountDomainLoading(v);\n            },\n        );\n        const sourceSub = subscribeKey(connex.wallet.state, 'source', (v) => {\n            setSource(v);\n        });\n        const certificateSub = subscribeKey(\n            connex.wallet.state,\n            'connectionCertificate',\n            (v) => {\n                setConnectionCertificate(v);\n            },\n        );\n\n        return () => {\n            addressSub();\n            domainSub();\n            isAccountDomainLoadingSub();\n            sourceSub();\n            certificateSub();\n        };\n    }, [connex.wallet.state]);\n\n    const openModal = useCallback(() => {\n        DAppKitUI.modal.open();\n    }, []);\n\n    const closeModal = useCallback(() => {\n        DAppKitUI.modal.close();\n    }, []);\n    const onModalConnected = useCallback(\n        (callback: (address: string | null) => void) =>\n            DAppKitUI.modal.onConnectionStatusChange(callback),\n        [],\n    );\n\n    const context: DAppKitContext = useMemo(() => {\n        return {\n            connex: {\n                thor: connex.thor,\n                vendor: connex.vendor,\n            },\n            wallet: {\n                setSource: connex.wallet.setSource,\n                disconnect: connex.wallet.disconnect,\n                connect: connex.wallet.connect,\n                availableWallets: connex.wallet.state.availableSources,\n                account,\n                accountDomain,\n                isAccountDomainLoading,\n                source,\n                connectionCertificate,\n                signTypedData: connex.wallet.signTypedData,\n            },\n            modal: {\n                open: openModal,\n                close: closeModal,\n                onConnectionStatusChange: onModalConnected,\n            },\n        };\n    }, [\n        connex,\n        account,\n        accountDomain,\n        isAccountDomainLoading,\n        source,\n        connectionCertificate,\n        openModal,\n        closeModal,\n        onModalConnected,\n    ]);\n\n    return <Context.Provider value={context}>{children}</Context.Provider>;\n};\n\nexport const DAppKitProvider = ({\n    children,\n    nodeUrl,\n    genesis,\n    walletConnectOptions,\n    usePersistence = false,\n    logLevel,\n    requireCertificate,\n    themeMode,\n    themeVariables,\n    i18n,\n    language,\n    modalParent,\n    onSourceClick,\n    connectionCertificate: connectionCertificateData,\n}: DAppKitProviderOptions): React.ReactElement | null => {\n    const [connex, setConnex] = useState<DAppKit | null>(null);\n    useEffect(() => {\n        setConnex(\n            DAppKitUI.configure({\n                nodeUrl,\n                genesis,\n                walletConnectOptions,\n                usePersistence,\n                logLevel,\n                requireCertificate,\n                themeVariables,\n                themeMode,\n                i18n,\n                language,\n                modalParent,\n                onSourceClick,\n                connectionCertificate: connectionCertificateData,\n            }),\n        );\n    }, [\n        nodeUrl,\n        genesis,\n        walletConnectOptions,\n        usePersistence,\n        logLevel,\n        requireCertificate,\n        themeVariables,\n        themeMode,\n        i18n,\n        language,\n        modalParent,\n        onSourceClick,\n        connectionCertificateData,\n    ]);\n    if (!connex) {\n        return null;\n    }\n    return (\n        <DAppKitProviderData connex={connex}>{children}</DAppKitProviderData>\n    );\n};\n","import { createContext } from 'react';\nimport type { DAppKitContext } from '../types';\n\nexport const Context = createContext<DAppKitContext | undefined>(undefined);\n","import { useContext } from 'react';\nimport { type DAppKitContext } from '../../types';\nimport { Context } from '../context';\n\n/**\n * Hook to get the connex object from the DAppKitProvider\n */\nexport const useConnex = (): DAppKitContext['connex'] => {\n    const context = useContext(Context);\n\n    if (!context) {\n        throw new Error('\"useConnex\" must be used within a ConnexProvider');\n    }\n\n    return context.connex;\n};\n","import { useContext } from 'react';\nimport { type DAppKitContext } from '../../types';\nimport { Context } from '../context';\n\n/**\n * Hook to get the wallet object from the DAppKitProvider\n */\nexport const useWallet = (): DAppKitContext['wallet'] => {\n    const context = useContext(Context);\n\n    if (!context) {\n        throw new Error('\"useWallet\" must be used within a ConnexProvider');\n    }\n\n    return context.wallet;\n};\n","import { useContext } from 'react';\nimport { type DAppKitContext } from '../../types';\nimport { Context } from '../context';\n\n/**\n * Hook to get the wallet modal object from the DAppKitProvider\n */\nexport const useWalletModal = (): DAppKitContext['modal'] => {\n    const context = useContext(Context);\n\n    if (!context) {\n        throw new Error(\n            '\"useWalletModal\" must be used within a ConnexProvider',\n        );\n    }\n    return context.modal;\n};\n","import React from 'react';\nimport { Button as ButtonVanilla } from '@vechain/dapp-kit-ui';\nimport { createComponent } from '@lit/react';\n\nexport const WalletButton = createComponent({\n    tagName: 'vdk-button',\n    elementClass: ButtonVanilla,\n    react: React,\n});\n","import { useEffect, useState } from 'react';\nimport { addressUtils } from '@vechain/sdk-core';\nimport { useConnex } from '../../DAppKitProvider/hooks/useConnex';\nimport { getDomain } from './api/getDomain';\nimport { getAddress } from './api/getAddress';\n\ninterface UseVechainDomainReturnType {\n    address: string | null;\n    domain: string | null;\n    isLoading: boolean;\n}\n\n/**\n * Hook to get the domain of an account and vice versa by passing the connex object\n */\nexport const useVechainDomain = ({\n    addressOrDomain,\n}: {\n    addressOrDomain?: string | null;\n}): UseVechainDomainReturnType => {\n    const connex = useConnex();\n\n    const [address, setAddress] = useState<string | null>(null);\n    const [domain, setDomain] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const isFalsy = !addressOrDomain;\n    const isValidAddress = !isFalsy && addressUtils.isAddress(addressOrDomain);\n\n    useEffect(() => {\n        if (isFalsy) {\n            setAddress(null);\n            setDomain(null);\n            setIsLoading(false);\n            return;\n        }\n\n        // if the addressOrDomain is an address, get the domain\n        if (isValidAddress) {\n            setAddress(addressOrDomain);\n            setIsLoading(true);\n            getDomain({ address: addressOrDomain, connex })\n                .then(setDomain)\n                .catch((err) => {\n                    console.error('Error getting domain: ', err);\n                    setDomain(null);\n                })\n                .finally(() => {\n                    setIsLoading(false);\n                });\n\n            return;\n        }\n\n        // if the addressOrDomain is a domain, get the address\n        setIsLoading(true);\n        getAddress({ domain: addressOrDomain, connex })\n            .then((domainAddress) => {\n                setDomain(addressOrDomain);\n                setAddress(domainAddress);\n            })\n            .catch((err) => {\n                console.error('Error getting address: ', err);\n                setAddress(null);\n                setDomain(null);\n            })\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }, [addressOrDomain, connex]);\n\n    return { address, domain, isLoading };\n};\n","import { genesisBlocks } from '@vechain/dapp-kit';\nimport type { DAppKitContext } from '../../../types';\nimport { VNS_RESOLVER } from '../constants';\n\nconst getNamesABI = {\n    inputs: [\n        {\n            internalType: 'address[]',\n            name: 'addresses',\n            type: 'address[]',\n        },\n    ],\n    name: 'getNames',\n    outputs: [\n        {\n            internalType: 'string[]',\n            name: 'names',\n            type: 'string[]',\n        },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n};\n\n/**\n * Get the domain of an account\n */\nexport const getDomain = async ({\n    address,\n    connex,\n}: {\n    address: string | null;\n    connex: DAppKitContext['connex'];\n}): Promise<string | null> => {\n    if (!address) return null;\n\n    const resolver =\n        connex.thor.genesis.id === genesisBlocks.test.id\n            ? VNS_RESOLVER.test\n            : VNS_RESOLVER.main;\n\n    const res = await connex.thor\n        .account(resolver)\n        .method(getNamesABI)\n        .call([address]);\n\n    const {\n        decoded: { names },\n    } = res;\n\n    return (names?.[0] as string) || null;\n};\n","/**\n * The VNS resolver addresses\n */\nexport const VNS_RESOLVER = {\n    main: '0xA11413086e163e41901bb81fdc5617c975Fa5a1A',\n    test: '0xc403b8EA53F707d7d4de095f0A20bC491Cf2bc94',\n};\n","import { genesisBlocks } from '@vechain/dapp-kit';\nimport type { DAppKitContext } from '../../../types';\nimport { VNS_RESOLVER } from '../constants';\n\nconst getAddressesABI = {\n    inputs: [\n        {\n            internalType: 'string[]',\n            name: 'names',\n            type: 'string[]',\n        },\n    ],\n    name: 'getAddresses',\n    outputs: [\n        {\n            internalType: 'address[]',\n            name: 'addresses',\n            type: 'address[]',\n        },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n};\n\n/**\n * Get the address of the domain\n */\nexport const getAddress = async ({\n    domain,\n    connex,\n}: {\n    domain: string | null;\n    connex: DAppKitContext['connex'];\n}): Promise<string | null> => {\n    if (!domain) return null;\n\n    const resolver =\n        connex.thor.genesis.id === genesisBlocks.test.id\n            ? VNS_RESOLVER.test\n            : VNS_RESOLVER.main;\n\n    const res = await connex.thor\n        .account(resolver)\n        .method(getAddressesABI)\n        .call([domain]);\n\n    const {\n        decoded: { addresses },\n    } = res;\n\n    return (addresses?.[0] as string) || null;\n};\n"],"mappings":"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","names":["useCallback","useEffect","useMemo","useState","DAppKitUI","subscribeKey","createContext","Context","jsx","DAppKitProviderData","children","connex","account","setAccount","useState","accountDomain","setAccountDomain","isAccountDomainLoading","setIsAccountDomainLoading","source","setSource","connectionCertificate","setConnectionCertificate","useEffect","addressSub","subscribeKey","v","domainSub","isAccountDomainLoadingSub","sourceSub","certificateSub","openModal","useCallback","DAppKitUI","closeModal","onModalConnected","callback","context","useMemo","Context","DAppKitProvider","nodeUrl","genesis","walletConnectOptions","usePersistence","logLevel","requireCertificate","themeMode","themeVariables","i18n","language","modalParent","onSourceClick","connectionCertificateData","setConnex","useContext","useConnex","context","useContext","Context","useContext","useWallet","context","useContext","Context","useContext","useWalletModal","context","useContext","Context","React","ButtonVanilla","createComponent","WalletButton","useEffect","useState","addressUtils","genesisBlocks","VNS_RESOLVER","getNamesABI","getDomain","address","connex","resolver","genesisBlocks","VNS_RESOLVER","res","names","genesisBlocks","getAddressesABI","getAddress","domain","connex","resolver","genesisBlocks","VNS_RESOLVER","res","addresses","useVechainDomain","addressOrDomain","connex","useConnex","address","setAddress","useState","domain","setDomain","isLoading","setIsLoading","isFalsy","isValidAddress","addressUtils","useEffect","getDomain","err","getAddress","domainAddress"]}