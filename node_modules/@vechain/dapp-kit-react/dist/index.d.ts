import React from 'react';
import { WalletSource, ConnectResponse, WalletManager, DAppKit } from '@vechain/dapp-kit';
export { DAppKitOptions, WalletConnectOptions } from '@vechain/dapp-kit';
import { DAppKitUIOptions, Button } from '@vechain/dapp-kit-ui';
export { DAppKitUIOptions } from '@vechain/dapp-kit-ui';
import { CertificateData } from '@vechain/sdk-core';
import * as _lit_react from '@lit/react';

interface AccountState {
    address: string | null;
    source: WalletSource | null;
}
/**
 * Connex Provider Options
 * @param children - React children
 */
type DAppKitProviderOptions = DAppKitUIOptions & {
    children: React.ReactNode;
};
/**
 * Connex Context
 * This context is used to provide the Connex instance and the Connex Vendor instance
 * to the application.
 */
interface DAppKitContext {
    connex: {
        thor: Connex.Thor;
        vendor: Connex.Vendor;
    };
    wallet: {
        setSource: (source: WalletSource) => void;
        availableWallets: WalletSource[];
        disconnect: () => void;
        connect: () => Promise<ConnectResponse>;
        account: string | null;
        accountDomain: string | null;
        isAccountDomainLoading: boolean;
        source: WalletSource | null;
        connectionCertificate: CertificateData | null;
        signTypedData: WalletManager['signTypedData'];
    };
    modal: {
        open: () => void;
        close: () => void;
        onConnectionStatusChange: (callback: (address: string | null) => void) => void;
    };
}

declare const DAppKitProviderData: ({ children, connex, }: {
    children: React.ReactNode;
    connex: DAppKit;
}) => React.ReactElement;
declare const DAppKitProvider: ({ children, nodeUrl, genesis, walletConnectOptions, usePersistence, logLevel, requireCertificate, themeMode, themeVariables, i18n, language, modalParent, onSourceClick, connectionCertificate: connectionCertificateData, allowedWallets, }: DAppKitProviderOptions) => React.ReactElement | null;

/**
 * Hook to get the connex object from the DAppKitProvider
 */
declare const useConnex: () => DAppKitContext["connex"];

/**
 * Hook to get the wallet object from the DAppKitProvider
 */
declare const useWallet: () => DAppKitContext["wallet"];

/**
 * Hook to get the wallet modal object from the DAppKitProvider
 */
declare const useWalletModal: () => DAppKitContext["modal"];

declare const WalletButton: _lit_react.ReactWebComponent<Button, {}>;

interface VechainDomainResult {
    address: string | undefined;
    domain: string | undefined;
    isValidAddressOrDomain: boolean;
}

interface UseVechainDomainReturnType extends VechainDomainResult {
    isLoading: boolean;
}
/**
 * Hook to get the domain of an account and vice versa by passing the connex object
 */
declare const useVechainDomain: ({ addressOrDomain, }: {
    addressOrDomain?: string | null;
}) => UseVechainDomainReturnType;

export { type AccountState, type DAppKitContext, DAppKitProvider, DAppKitProviderData, type DAppKitProviderOptions, WalletButton, useConnex, useVechainDomain, useWallet, useWalletModal };
