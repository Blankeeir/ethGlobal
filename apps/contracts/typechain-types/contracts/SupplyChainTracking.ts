/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ISupplyChainTracking {
  export type TrackingDataStruct = {
    timestamp: BigNumberish;
    location: string;
    handler: string;
    status: string;
    envKeys: string[];
    envValues: string[];
    temperature: BigNumberish;
    humidity: BigNumberish;
    isValidated: boolean;
    validator: AddressLike;
  };

  export type TrackingDataStructOutput = [
    timestamp: bigint,
    location: string,
    handler: string,
    status: string,
    envKeys: string[],
    envValues: string[],
    temperature: bigint,
    humidity: bigint,
    isValidated: boolean,
    validator: string
  ] & {
    timestamp: bigint;
    location: string;
    handler: string;
    status: string;
    envKeys: string[];
    envValues: string[];
    temperature: bigint;
    humidity: bigint;
    isValidated: boolean;
    validator: string;
  };
}

export interface SupplyChainTrackingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "TRACKER_ROLE"
      | "VALIDATOR_ROLE"
      | "addTrackingData"
      | "getRoleAdmin"
      | "getTrackingHistory"
      | "grantRole"
      | "hasRole"
      | "nftContract"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setThresholds"
      | "supportsInterface"
      | "thresholds"
      | "trackingCount"
      | "unpause"
      | "validateTrackingData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AlertTriggered"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TrackingUpdated"
      | "TrackingValidated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRACKER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTrackingData",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string[],
      string[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrackingHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setThresholds",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "thresholds",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "trackingCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateTrackingData",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRACKER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTrackingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrackingHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "thresholds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trackingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateTrackingData",
    data: BytesLike
  ): Result;
}

export namespace AlertTriggeredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    alertType: string,
    description: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    alertType: string,
    description: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    alertType: string;
    description: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrackingUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    location: string,
    status: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    location: string,
    status: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    location: string;
    status: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrackingValidatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    trackingIndex: BigNumberish,
    validator: AddressLike,
    isValid: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    trackingIndex: bigint,
    validator: string,
    isValid: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    trackingIndex: bigint;
    validator: string;
    isValid: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SupplyChainTracking extends BaseContract {
  connect(runner?: ContractRunner | null): SupplyChainTracking;
  waitForDeployment(): Promise<this>;

  interface: SupplyChainTrackingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  TRACKER_ROLE: TypedContractMethod<[], [string], "view">;

  VALIDATOR_ROLE: TypedContractMethod<[], [string], "view">;

  addTrackingData: TypedContractMethod<
    [
      tokenId: BigNumberish,
      location: string,
      handler: string,
      status: string,
      envKeys: string[],
      envValues: string[],
      temperature: BigNumberish,
      humidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTrackingHistory: TypedContractMethod<
    [tokenId: BigNumberish],
    [ISupplyChainTracking.TrackingDataStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  nftContract: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setThresholds: TypedContractMethod<
    [
      tokenId: BigNumberish,
      maxTemperature: BigNumberish,
      minTemperature: BigNumberish,
      maxHumidity: BigNumberish,
      minHumidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  thresholds: TypedContractMethod<
    [arg0: BigNumberish, arg1: string],
    [bigint],
    "view"
  >;

  trackingCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  validateTrackingData: TypedContractMethod<
    [
      tokenId: BigNumberish,
      trackingIndex: BigNumberish,
      isValid: boolean,
      notes: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRACKER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addTrackingData"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      location: string,
      handler: string,
      status: string,
      envKeys: string[],
      envValues: string[],
      temperature: BigNumberish,
      humidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTrackingHistory"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [ISupplyChainTracking.TrackingDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setThresholds"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      maxTemperature: BigNumberish,
      minTemperature: BigNumberish,
      maxHumidity: BigNumberish,
      minHumidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "thresholds"
  ): TypedContractMethod<[arg0: BigNumberish, arg1: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "trackingCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateTrackingData"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      trackingIndex: BigNumberish,
      isValid: boolean,
      notes: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AlertTriggered"
  ): TypedContractEvent<
    AlertTriggeredEvent.InputTuple,
    AlertTriggeredEvent.OutputTuple,
    AlertTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TrackingUpdated"
  ): TypedContractEvent<
    TrackingUpdatedEvent.InputTuple,
    TrackingUpdatedEvent.OutputTuple,
    TrackingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TrackingValidated"
  ): TypedContractEvent<
    TrackingValidatedEvent.InputTuple,
    TrackingValidatedEvent.OutputTuple,
    TrackingValidatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AlertTriggered(uint256,string,string,uint256)": TypedContractEvent<
      AlertTriggeredEvent.InputTuple,
      AlertTriggeredEvent.OutputTuple,
      AlertTriggeredEvent.OutputObject
    >;
    AlertTriggered: TypedContractEvent<
      AlertTriggeredEvent.InputTuple,
      AlertTriggeredEvent.OutputTuple,
      AlertTriggeredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TrackingUpdated(uint256,string,string,uint256)": TypedContractEvent<
      TrackingUpdatedEvent.InputTuple,
      TrackingUpdatedEvent.OutputTuple,
      TrackingUpdatedEvent.OutputObject
    >;
    TrackingUpdated: TypedContractEvent<
      TrackingUpdatedEvent.InputTuple,
      TrackingUpdatedEvent.OutputTuple,
      TrackingUpdatedEvent.OutputObject
    >;

    "TrackingValidated(uint256,uint256,address,bool)": TypedContractEvent<
      TrackingValidatedEvent.InputTuple,
      TrackingValidatedEvent.OutputTuple,
      TrackingValidatedEvent.OutputObject
    >;
    TrackingValidated: TypedContractEvent<
      TrackingValidatedEvent.InputTuple,
      TrackingValidatedEvent.OutputTuple,
      TrackingValidatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
