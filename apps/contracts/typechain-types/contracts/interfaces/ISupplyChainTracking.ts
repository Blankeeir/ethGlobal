/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISupplyChainTracking {
  export type TrackingDataStruct = {
    timestamp: BigNumberish;
    location: string;
    handler: string;
    status: string;
    envKeys: string[];
    envValues: string[];
    temperature: BigNumberish;
    humidity: BigNumberish;
    isValidated: boolean;
    validator: AddressLike;
  };

  export type TrackingDataStructOutput = [
    timestamp: bigint,
    location: string,
    handler: string,
    status: string,
    envKeys: string[],
    envValues: string[],
    temperature: bigint,
    humidity: bigint,
    isValidated: boolean,
    validator: string
  ] & {
    timestamp: bigint;
    location: string;
    handler: string;
    status: string;
    envKeys: string[];
    envValues: string[];
    temperature: bigint;
    humidity: bigint;
    isValidated: boolean;
    validator: string;
  };
}

export interface ISupplyChainTrackingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTrackingData"
      | "getTrackingHistory"
      | "validateTrackingData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AlertTriggered"
      | "TrackingUpdated"
      | "TrackingValidated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTrackingData",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string[],
      string[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrackingHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTrackingData",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTrackingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrackingHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTrackingData",
    data: BytesLike
  ): Result;
}

export namespace AlertTriggeredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    alertType: string,
    description: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    alertType: string,
    description: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    alertType: string;
    description: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrackingUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    location: string,
    status: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    location: string,
    status: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    location: string;
    status: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrackingValidatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    trackingIndex: BigNumberish,
    validator: AddressLike,
    isValid: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    trackingIndex: bigint,
    validator: string,
    isValid: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    trackingIndex: bigint;
    validator: string;
    isValid: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISupplyChainTracking extends BaseContract {
  connect(runner?: ContractRunner | null): ISupplyChainTracking;
  waitForDeployment(): Promise<this>;

  interface: ISupplyChainTrackingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTrackingData: TypedContractMethod<
    [
      tokenId: BigNumberish,
      location: string,
      handler: string,
      status: string,
      envKeys: string[],
      envValues: string[],
      temperature: BigNumberish,
      humidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getTrackingHistory: TypedContractMethod<
    [tokenId: BigNumberish],
    [ISupplyChainTracking.TrackingDataStructOutput[]],
    "view"
  >;

  validateTrackingData: TypedContractMethod<
    [
      tokenId: BigNumberish,
      trackingIndex: BigNumberish,
      isValid: boolean,
      notes: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTrackingData"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      location: string,
      handler: string,
      status: string,
      envKeys: string[],
      envValues: string[],
      temperature: BigNumberish,
      humidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTrackingHistory"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [ISupplyChainTracking.TrackingDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateTrackingData"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      trackingIndex: BigNumberish,
      isValid: boolean,
      notes: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AlertTriggered"
  ): TypedContractEvent<
    AlertTriggeredEvent.InputTuple,
    AlertTriggeredEvent.OutputTuple,
    AlertTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "TrackingUpdated"
  ): TypedContractEvent<
    TrackingUpdatedEvent.InputTuple,
    TrackingUpdatedEvent.OutputTuple,
    TrackingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TrackingValidated"
  ): TypedContractEvent<
    TrackingValidatedEvent.InputTuple,
    TrackingValidatedEvent.OutputTuple,
    TrackingValidatedEvent.OutputObject
  >;

  filters: {
    "AlertTriggered(uint256,string,string,uint256)": TypedContractEvent<
      AlertTriggeredEvent.InputTuple,
      AlertTriggeredEvent.OutputTuple,
      AlertTriggeredEvent.OutputObject
    >;
    AlertTriggered: TypedContractEvent<
      AlertTriggeredEvent.InputTuple,
      AlertTriggeredEvent.OutputTuple,
      AlertTriggeredEvent.OutputObject
    >;

    "TrackingUpdated(uint256,string,string,uint256)": TypedContractEvent<
      TrackingUpdatedEvent.InputTuple,
      TrackingUpdatedEvent.OutputTuple,
      TrackingUpdatedEvent.OutputObject
    >;
    TrackingUpdated: TypedContractEvent<
      TrackingUpdatedEvent.InputTuple,
      TrackingUpdatedEvent.OutputTuple,
      TrackingUpdatedEvent.OutputObject
    >;

    "TrackingValidated(uint256,uint256,address,bool)": TypedContractEvent<
      TrackingValidatedEvent.InputTuple,
      TrackingValidatedEvent.OutputTuple,
      TrackingValidatedEvent.OutputObject
    >;
    TrackingValidated: TypedContractEvent<
      TrackingValidatedEvent.InputTuple,
      TrackingValidatedEvent.OutputTuple,
      TrackingValidatedEvent.OutputObject
    >;
  };
}
