{"version":3,"sources":["../../src/utils/validateEnv.ts"],"sourcesContent":["import { makeValidator, cleanEnv, port, str } from 'envalid';\n\nconst openApiKey = makeValidator((apiKey: string) => {\n  if (/^sk-proj-.{100,}$/.test(apiKey)) {\n    return apiKey;\n  } else {\n    throw new Error('Please obtain a valid OpenAPI-Key from https://platform.openai.com/api-keys');\n  }\n});\n\nexport const ValidateEnv = () => {\n  return cleanEnv(process.env, {\n    NODE_ENV: str(),\n    PORT: port({ devDefault: 3000 }),\n    ORIGIN: str({ devDefault: '*' }),\n    LOG_FORMAT: str({ devDefault: 'prod' }),\n    LOG_DIR: str({ devDefault: '../logs' }),\n    REWARD_AMOUNT: str({ devDefault: '1' }),\n    ADMIN_MNEMONIC: str(),\n    NETWORK_URL: str({ devDefault: 'http://localhost:8669' }),\n    NETWORK_TYPE: str({ devDefault: 'solo' }),\n    OPENAI_API_KEY: openApiKey(),\n    MAX_FILE_SIZE: str({ devDefault: '10mb' }),\n    ADMIN_ADDRESS: str({ default: '' }),\n\n  });\n};\n"],"names":["ValidateEnv","openApiKey","makeValidator","apiKey","test","Error","cleanEnv","process","env","NODE_ENV","str","PORT","port","devDefault","ORIGIN","LOG_FORMAT","LOG_DIR","REWARD_AMOUNT","ADMIN_MNEMONIC","NETWORK_URL","NETWORK_TYPE","OPENAI_API_KEY","MAX_FILE_SIZE","ADMIN_ADDRESS","default"],"mappings":";;;;+BAUaA;;;eAAAA;;;yBAVsC;AAEnD,MAAMC,aAAaC,IAAAA,sBAAa,EAAC,CAACC;IAChC,IAAI,oBAAoBC,IAAI,CAACD,SAAS;QACpC,OAAOA;IACT,OAAO;QACL,MAAM,IAAIE,MAAM;IAClB;AACF;AAEO,MAAML,cAAc;IACzB,OAAOM,IAAAA,iBAAQ,EAACC,QAAQC,GAAG,EAAE;QAC3BC,UAAUC,IAAAA,YAAG;QACbC,MAAMC,IAAAA,aAAI,EAAC;YAAEC,YAAY;QAAK;QAC9BC,QAAQJ,IAAAA,YAAG,EAAC;YAAEG,YAAY;QAAI;QAC9BE,YAAYL,IAAAA,YAAG,EAAC;YAAEG,YAAY;QAAO;QACrCG,SAASN,IAAAA,YAAG,EAAC;YAAEG,YAAY;QAAU;QACrCI,eAAeP,IAAAA,YAAG,EAAC;YAAEG,YAAY;QAAI;QACrCK,gBAAgBR,IAAAA,YAAG;QACnBS,aAAaT,IAAAA,YAAG,EAAC;YAAEG,YAAY;QAAwB;QACvDO,cAAcV,IAAAA,YAAG,EAAC;YAAEG,YAAY;QAAO;QACvCQ,gBAAgBpB;QAChBqB,eAAeZ,IAAAA,YAAG,EAAC;YAAEG,YAAY;QAAO;QACxCU,eAAeb,IAAAA,YAAG,EAAC;YAAEc,SAAS;QAAG;IAEnC;AACF"}