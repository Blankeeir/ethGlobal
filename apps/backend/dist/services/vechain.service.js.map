{"version":3,"sources":["../../src/services/vechain.service.ts"],"sourcesContent":["// services/vechain.service.ts\nimport { Framework } from '@vechain/connex-framework';\n\nimport { Driver, SimpleNet } from '@vechain/connex-driver';\nimport ServareMarketplaceAbi from '../../../contracts/abi/ServareMarketplace.json';\nimport SupplyChainTrackingAbi from '../../../contracts/abi/SupplyChainTracking.json';\nimport ServareNFTAbi from '../../../contracts/abi/SurfoodNFT.json';\nimport { config } from '../config';\n\nexport class VeChainService {\n  private static instance: VeChainService;\n  private connex: Framework;\n  private contracts: {\n    nft: any;\n    marketplace: any;\n    supplyChain: any;\n  };\n\n  private constructor() {\n    const driver = new Driver(new SimpleNet(config.vechain.nodeUrl), this.connex.thor.genesis);\n    this.connex = new Framework(driver);\n    this.contracts = {\n      nft: this.connex.thor.account(config.contracts.nft).method(ServareNFTAbi),\n      marketplace: this.connex.thor.account(config.contracts.marketplace).method(ServareMarketplaceAbi),\n      supplyChain: this.connex.thor.account(config.contracts.supplyChain).method(SupplyChainTrackingAbi),\n    };\n  }\n\n  static getInstance(): VeChainService {\n    if (!VeChainService.instance) {\n      VeChainService.instance = new VeChainService();\n    }\n    return VeChainService.instance;\n  }\n\n  async createProduct(productData: any, caller: string) {\n    const method = this.contracts.nft.method('createProduct');\n    const clause = method.asClause(\n      productData.name,\n      productData.description,\n      productData.quantity,\n      productData.location,\n      productData.expiryDate,\n      productData.productionDate,\n      productData.category,\n      productData.imageUri,\n      productData.price,\n      productData.metadataHash,\n      productData.carbonFootprint,\n    );\n\n    const txResponse = await this.connex.vendor.sign('tx', [clause]).signer(caller).request();\n\n    return this.waitForTxReceipt(txResponse.txid);\n  }\n\n  async listProduct(tokenId: string, price: string, listingType: number, auctionDuration: number, caller: string) {\n    const method = this.contracts.marketplace.method('listItem');\n    const clause = method.asClause(tokenId, price, listingType, auctionDuration);\n\n    const txResponse = await this.connex.vendor.sign('tx', [clause]).signer(caller).request();\n\n    return this.waitForTxReceipt(txResponse.txid);\n  }\n\n  async buyProduct(tokenId: string, caller: string) {\n    const method = this.contracts.marketplace.method('buyItem');\n    const clause = method.asClause(tokenId);\n\n    const txResponse = await this.connex.vendor.sign('tx', [clause]).signer(caller).request();\n\n    return this.waitForTxReceipt(txResponse.txid);\n  }\n\n  async addSupplyChainEvent(tokenId: string, eventData: any, caller: string) {\n    const method = this.contracts.nft.method('addSupplyChainEvent');\n    const clause = method.asClause(\n      tokenId,\n      eventData.eventType,\n      eventData.location,\n      eventData.temperature,\n      eventData.humidity,\n      eventData.additionalDataHash,\n    );\n\n    const txResponse = await this.connex.vendor.sign('tx', [clause]).signer(caller).request();\n\n    return this.waitForTxReceipt(txResponse.txid);\n  }\n\n  async verifyProduct(tokenId: string, verificationData: any, caller: string) {\n    const method = this.contracts.nft.method('verifyProduct');\n    const clause = method.asClause(tokenId, verificationData.verificationType, verificationData.isVerified, verificationData.notes);\n\n    const txResponse = await this.connex.vendor.sign('tx', [clause]).signer(caller).request();\n\n    return this.waitForTxReceipt(txResponse.txid);\n  }\n\n  // Query methods\n  async getProduct(tokenId: string) {\n    const method = this.contracts.nft.method('getProduct');\n    const result = await method.call(tokenId);\n    return this.formatProductData(result);\n  }\n\n  async getSupplyChainEvents(tokenId: string) {\n    const method = this.contracts.nft.method('getSupplyChainEvents');\n    const result = await method.call(tokenId);\n    return this.formatSupplyChainEvents(result);\n  }\n\n  async getVerifications(tokenId: string) {\n    const method = this.contracts.nft.method('getVerifications');\n    const result = await method.call(tokenId);\n    return this.formatVerifications(result);\n  }\n\n  async getListing(tokenId: string) {\n    const method = this.contracts.marketplace.method('listings');\n    const result = await method.call(tokenId);\n    return this.formatListing(result);\n  }\n\n  // Helper methods\n  private async waitForTxReceipt(txId: string) {\n    let receipt = null;\n    while (!receipt) {\n      receipt = await this.connex.thor.transaction(txId).getReceipt();\n      if (!receipt) {\n        await new Promise(resolve => setTimeout(resolve, 3000));\n      }\n    }\n    return receipt;\n  }\n\n  private formatProductData(data: any) {\n    const { utils } = require('ethers');\n\n    return {\n      name: data.name,\n      description: data.description,\n      quantity: data.quantity.toString(),\n      location: data.location,\n      expiryDate: new Date(data.expiryDate * 1000),\n      productionDate: data.productionDate,\n      category: data.category,\n      imageUri: data.imageUri,\n      price: utils.formatEther(data.price),\n      isListed: data.isListed,\n      producer: data.producer,\n      isVerified: data.isVerified,\n      carbonFootprint: data.carbonFootprint.toString(),\n      qualityScore: data.qualityScore.toString(),\n    };\n  }\n\n  private formatSupplyChainEvents(events: any) {\n    return events.map((event: any) => ({\n      timestamp: new Date(event.timestamp * 1000),\n      eventType: event.eventType,\n      location: event.location,\n      handler: event.handler,\n      temperature: event.temperature,\n      humidity: event.humidity,\n      additionalDataHash: event.additionalDataHash,\n    }));\n  }\n\n  private formatVerifications(verifications: any) {\n    return verifications.map((verification: any) => ({\n      timestamp: new Date(verification.timestamp * 1000),\n      verifier: verification.verifier,\n      verificationType: verification.verificationType,\n      isVerified: verification.isVerified,\n      notes: verification.notes,\n    }));\n  }\n\n  private formatListing(listing: any) {\n    const { utils } = require('ethers');\n    return {\n      tokenId: listing.tokenId.toString(),\n      seller: listing.seller,\n      price: utils.formatEther(listing.price),\n      isActive: listing.isActive,\n      listedAt: new Date(listing.listedAt * 1000),\n      listingType: listing.listingType,\n      auctionEndTime: listing.auctionEndTime > 0 ? new Date(listing.auctionEndTime * 1000) : null,\n      highestBidder: listing.highestBidder,\n      highestBid: listing.highestBid > 0 ? utils.formatEther(listing.highestBid) : '0',\n    };\n  }\n\n  // Event listeners\n  subscribeToEvents(eventName: string, callback: (event: any) => void) {\n    const eventFilter = this.connex.thor.filter('event', [this.getEventCriteria(eventName)]);\n\n    return eventFilter.apply(0, Number.MAX_SAFE_INTEGER).then((events: any) => {\n      events.forEach((event: any) => {\n        callback(this.formatEvent(eventName, event));\n      });\n    });\n  }\n\n  private getEventCriteria(eventName: string) {\n    // Define event criteria based on event name\n    switch (eventName) {\n      case 'ProductCreated':\n        return { address: config.contracts.nft };\n      case 'Listed':\n      case 'Sale':\n        return { address: config.contracts.marketplace };\n      default:\n        throw new Error(`Unknown event: ${eventName}`);\n    }\n  }\n\n  private formatEvent(eventName: string, event: any) {\n    const { utils } = require('ethers');\n    // Format event data based on event type\n    switch (eventName) {\n      case 'ProductCreated':\n        return {\n          tokenId: event.topics[1],\n          producer: event.topics[2],\n          name: event.data.name,\n          price: utils.formatEther(event.data.price),\n        };\n      case 'Listed':\n        return {\n          tokenId: event.topics[1],\n          seller: event.topics[2],\n          price: utils.formatEther(event.data.price),\n          listingType: event.data.listingType,\n        };\n      case 'Sale':\n        return {\n          tokenId: event.topics[1],\n          seller: event.topics[2],\n          buyer: event.topics[3],\n          price: utils.formatEther(event.data.price),\n        };\n      default:\n        return event;\n    }\n  }\n}\n"],"names":["VeChainService","getInstance","instance","createProduct","productData","caller","method","contracts","nft","clause","asClause","name","description","quantity","location","expiryDate","productionDate","category","imageUri","price","metadataHash","carbonFootprint","txResponse","connex","vendor","sign","signer","request","waitForTxReceipt","txid","listProduct","tokenId","listingType","auctionDuration","marketplace","buyProduct","addSupplyChainEvent","eventData","eventType","temperature","humidity","additionalDataHash","verifyProduct","verificationData","verificationType","isVerified","notes","getProduct","result","call","formatProductData","getSupplyChainEvents","formatSupplyChainEvents","getVerifications","formatVerifications","getListing","formatListing","txId","receipt","thor","transaction","getReceipt","Promise","resolve","setTimeout","data","utils","require","toString","Date","formatEther","isListed","producer","qualityScore","events","map","event","timestamp","handler","verifications","verification","verifier","listing","seller","isActive","listedAt","auctionEndTime","highestBidder","highestBid","subscribeToEvents","eventName","callback","eventFilter","filter","getEventCriteria","apply","Number","MAX_SAFE_INTEGER","then","forEach","formatEvent","address","config","Error","topics","buyer","driver","Driver","SimpleNet","vechain","nodeUrl","genesis","Framework","account","ServareNFTAbi","ServareMarketplaceAbi","supplyChain","SupplyChainTrackingAbi"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}