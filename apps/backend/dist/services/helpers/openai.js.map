{"version":3,"sources":["../../../src/services/helpers/openai.ts"],"sourcesContent":["import { OPENAI_API_KEY } from '@/config';\nimport OpenAI from 'openai';\nimport { ChatCompletion } from 'openai/resources';\n\nexport class OpenAIHelper {\n  private openai: OpenAI;\n\n  constructor(private _openai?: OpenAI) {\n    if (_openai) {\n      this.openai = _openai;\n    } else {\n      this.openai = this.createOpenAIInstance();\n    }\n  }\n\n  private createOpenAIInstance = () =>\n    new OpenAI({\n      apiKey: OPENAI_API_KEY,\n      dangerouslyAllowBrowser: true, // Required for browser usage\n    });\n\n  public askChatGPTAboutImage = async ({ base64Image, maxTokens = 350, prompt }: { base64Image: string; prompt: string; maxTokens?: number }) =>\n    this.openai.chat.completions.create({\n      model: 'gpt-4o',\n      max_tokens: maxTokens,\n      messages: [\n        {\n          role: 'user',\n          content: [\n            {\n              type: 'text',\n              text: prompt,\n            },\n            {\n              type: 'image_url',\n              image_url: {\n                url: base64Image,\n              },\n            },\n          ],\n        },\n      ],\n    });\n\n  public getResponseJSONString = (response: ChatCompletion) => response.choices[0].message.content;\n\n  private cleanChatGPTJSONString = (jsonString: string) => jsonString.replace('```json', '').replace('```', '');\n\n  public parseChatGPTJSONString = <Response>(jsonString?: string | null): Response | undefined => {\n    if (!jsonString) {\n      return;\n    }\n    const content = this.cleanChatGPTJSONString(jsonString);\n    if (content) {\n      try {\n        const parsed = JSON.parse(content);\n        return parsed;\n      } catch (e) {\n        console.error('Failing parsing Chat GPT response:', e);\n      }\n    }\n  };\n}\n"],"names":["OpenAIHelper","constructor","_openai","openai","createOpenAIInstance","askChatGPTAboutImage","getResponseJSONString","cleanChatGPTJSONString","parseChatGPTJSONString","OpenAI","apiKey","OPENAI_API_KEY","dangerouslyAllowBrowser","base64Image","maxTokens","prompt","chat","completions","create","model","max_tokens","messages","role","content","type","text","image_url","url","response","choices","message","jsonString","replace","parsed","JSON","parse","e","console","error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAIaA;;;eAAAA;;;wBAJkB;iDACZ;;;;;;;;;;;;;;;;;;;AAGZ,IAAA,AAAMA,eAAN,MAAMA;IAGXC,YAAY,AAAQC,QAAgB,CAAE;;QAFtC,uBAAQC,UAAR,KAAA;QAUA,uBAAQC,wBAAR,KAAA;QAMA,uBAAOC,wBAAP,KAAA;QAuBA,uBAAOC,yBAAP,KAAA;QAEA,uBAAQC,0BAAR,KAAA;QAEA,uBAAOC,0BAAP,KAAA;aAzCoBN,UAAAA;aAQZE,uBAAuB,IAC7B,IAAIK,eAAM,CAAC;gBACTC,QAAQC,sBAAc;gBACtBC,yBAAyB;YAC3B;aAEKP,uBAAuB,OAAO,EAAEQ,WAAW,EAAEC,YAAY,GAAG,EAAEC,MAAM,EAA+D,GACxI,IAAI,CAACZ,MAAM,CAACa,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;gBAClCC,OAAO;gBACPC,YAAYN;gBACZO,UAAU;oBACR;wBACEC,MAAM;wBACNC,SAAS;4BACP;gCACEC,MAAM;gCACNC,MAAMV;4BACR;4BACA;gCACES,MAAM;gCACNE,WAAW;oCACTC,KAAKd;gCACP;4BACF;yBACD;oBACH;iBACD;YACH;aAEKP,wBAAwB,CAACsB,WAA6BA,SAASC,OAAO,CAAC,EAAE,CAACC,OAAO,CAACP,OAAO;aAExFhB,yBAAyB,CAACwB,aAAuBA,WAAWC,OAAO,CAAC,WAAW,IAAIA,OAAO,CAAC,OAAO;aAEnGxB,yBAAyB,CAAWuB;YACzC,IAAI,CAACA,YAAY;gBACf;YACF;YACA,MAAMR,UAAU,IAAI,CAAChB,sBAAsB,CAACwB;YAC5C,IAAIR,SAAS;gBACX,IAAI;oBACF,MAAMU,SAASC,KAAKC,KAAK,CAACZ;oBAC1B,OAAOU;gBACT,EAAE,OAAOG,GAAG;oBACVC,QAAQC,KAAK,CAAC,sCAAsCF;gBACtD;YACF;QACF;QArDE,IAAIlC,UAAS;YACX,IAAI,CAACC,MAAM,GAAGD;QAChB,OAAO;YACL,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,oBAAoB;QACzC;IACF;AAiDF"}